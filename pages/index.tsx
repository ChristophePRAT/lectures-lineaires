import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react'
import RowComponent from '../components/RowComponent'
import { supabase, LectureLineaire } from '../utils/supabaseClient'
import Auth from '../components/Auth'
import Account from '../components/Account'
import NewRowComponent from '../components/NewRowComponent'
import useLocalStorage from '../utils/useLocalStorage';

const Home: NextPage = () => {
  const [data, setData] = useState<any>();
  const [showDialog, setShowDialog] = useState(false);
  const [showEdit, setShowEdit] = useState(false);
  const [session, setSession] = useState<any>(null);
  const [editData, setEditData] = useState<LectureLineaire>();
  const [access_level, _] = useLocalStorage('access_level', -1);

  const getData = async () => {
    const { data: LectureLineaire, error } = await supabase
    .from("LectureLineaire")
    .select()

    if (error) {
      console.error(error)
    } else {
      setData(LectureLineaire)
    }
  }
  const onDismiss = () => {
    setEditData(undefined);
    getData();
    setShowDialog(false);
  }
  const onEdit = (item: any) => {
    console.table(item);
    console.log(item.explanation)
    setEditData(
      {
        id: item.id,
        title: item.title,
        introduction: item.introduction,
        explanation: item.explanation,
        extract: item.extract,
        videoLink: item.videoLink,
      });
      setShowDialog(true)
  }

  useEffect(() => {
    console.log("Edit Data: ")
    console.log(editData?.introduction)
  }, [editData])


  useEffect(() => {
    setSession(supabase.auth.session())

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })

    getData()
  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Lectures Lineaires</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.googleapis.com/css2?family=Quicksand&display=swap" rel="stylesheet" />
      </Head>
      <main className={styles.main}>
        {!session ? <Auth /> : <Account key={session.user.id} session={session} />}
        <div className={styles.lectureslineaires}>
          {
            // map data and display RowComponent with key
            // enumerate data

            data &&
              data
            .sort((a: any, b: any) => {
                const regex = /(?<=LL)\d{1,}/g;
                const aNum = a.title.match(regex)?.[0]
                const bNum = b.title.match(regex)?.[0]
                return aNum - bNum
          })
              .map((item: LectureLineaire, index: number) => {
              return (
                <RowComponent
                  key={index}
                  id={item.id}
                  title={item.title}
                  extract={item.extract}
                  videoLink={item.videoLink}
                  introduction={item.introduction}
                  explanation={item.explanation}
                  access_level={access_level}
                  onEdit={() => onEdit(item)}
                />
              );
            })
          }
          { access_level > 0 &&
            <button 
              className="buttonDefault shrink-0 h-fit" 
              onClick={() => setShowDialog(true)}
            >
              Ajouter nouvelle lecture 
              <svg xmlns="http://www.w3.org/2000/svg" className="inline w-6 h-6 mx-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>          
            </button>
          }
        </div>
        { showDialog &&
        <NewRowComponent 
          isOpen={showDialog} 
          lecture={editData && editData}
          close={onDismiss}
        />
        }
      </main>
      <footer className={styles.footer}>
        © Copyrights - {new Date().getFullYear()} - <a href="https://christophe-portfolio.vercel.app" className="inline px-1 text-blue-500 hover:opacity-70">Christophe P.</a> & SFA 1ère 3
        <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5 fill-red-500" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
        </svg>
      </footer>
    </div>
  );
}

export default Home
