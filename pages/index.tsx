import type { NextPage } from 'next'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react'
import RowComponent from '../components/RowComponent'
import { supabase } from '../utils/supabaseClient'
import Auth from '../components/Auth'
import Account from '../components/Account'
import NewRowComponent from '../components/NewRowComponent'

const Home: NextPage = () => {
  const [data, setData] = useState<any>();
  const [showDialog, setShowDialog] = useState(false);
  const [session, setSession] = useState<any>(null);
  const [editData, setEditData] = useState<any>();

  const [access_level, setAccessLevel] = useState(-1);

  const getData = async () => {
    const { data: LectureLineaire, error } = await supabase
    .from("LectureLineaire")
    .select()

    if (error) {
      console.log(error)
    } else {
      console.log(LectureLineaire)
      setData(LectureLineaire)
    }
  }


  useEffect(() => {
    setSession(supabase.auth.session())

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })

    getData()
    setAccessLevel(JSON.parse(localStorage.getItem("access_level") ?? "-1"))

  }, [])

  return (
    <div className={styles.container}>
      <Head>
        <title>Lectures Lineaires</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {!session ? <Auth /> : <Account key={session.user.id} session={session} />}
        <div className="flex flex-row justify-between p-4 overflow-scroll flex-nowrap">
          {
            // map data and display RowComponent with key
            // enumerate data

            data &&
              data.map((item: any, index: number) => {
              return (
                <RowComponent
                  key={index}
                  id={item.id}
                  title={item.title}
                  extract={item.extract}
                  videoLink={item.videoLink}
                  introduction={item.introduction}
                  explanation={item.explanation}
                  access_level={access_level}
                  onEdit={() => {setShowDialog(true); setEditData(item)}}
                />
              );
            })
          }
          { access_level > 0 &&
            <button 
              className="buttonDefault shrink-0 h-fit" 
              onClick={() => setShowDialog(true)}
            >
              Ajouter nouvelle lecture 
              <svg xmlns="http://www.w3.org/2000/svg" className="inline w-6 h-6 mx-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>          
            </button>
          }
        </div>
        <NewRowComponent isOpen={showDialog} {...editData} close={() => {setShowDialog(false); getData()}} />
      </main>
    </div>
  );
}

export default Home
